{
  "_metadata": {
    "version": "1.0.0", 
    "description": "Comprehensive validation checklist for content quality assurance",
    "purpose": "Ensure all generated content meets DeepV Code standards before publication",
    "lastUpdated": "2025-09-18"
  },
  "critical_validations": {
    "frontmatter_validation": {
      "required_fields": [
        "✅ title (5-70 chars)",
        "✅ slug (kebab-case)",
        "✅ category (exists in categories.json)",
        "✅ subcategory (valid for category)",
        "✅ description (20-200 chars)",
        "✅ tags (array, 3-8 items)",
        "✅ difficulty (beginner/intermediate/advanced)",
        "✅ readTime (1-60 minutes)",
        "✅ lastUpdated (ISO 8601 format)"
      ],
      "validation_script": "node validate-content.js",
      "must_pass": true
    },
    "content_validation": {
      "code_blocks": [
        "✅ ALL code blocks have language specified",
        "✅ No ``` without language tag",
        "✅ Mermaid diagrams use ```mermaid",
        "✅ Proper language names (javascript not js)"
      ],
      "structure": [
        "✅ Main heading (# Title)",
        "✅ Minimum 100 words content",
        "✅ Logical heading hierarchy",
        "✅ Proper conclusion or summary"
      ],
      "technical_accuracy": [
        "✅ Code examples are syntactically correct",
        "✅ Commands and instructions work",
        "✅ Current best practices used",
        "✅ No deprecated methods mentioned"
      ]
    },
    "filename_validation": {
      "pattern": "^[a-z0-9-]+-[a-f0-9]{8}\\.mdx$",
      "components": [
        "✅ Descriptive slug (kebab-case)",
        "✅ 8-character hex ID",
        "✅ .mdx extension",
        "✅ ID matches frontmatter if applicable"
      ]
    },
    "url_validation": {
      "pattern": "/guides/{slug}-{id}",
      "requirements": [
        "✅ Slug matches filename slug",
        "✅ ID matches filename hex ID", 
        "✅ URL is SEO-friendly",
        "✅ Under 100 characters total"
      ]
    }
  },
  "quality_validations": {
    "seo_optimization": {
      "title": [
        "✅ 50-60 characters (optimal)",
        "✅ Primary keyword included",
        "✅ Action words used (How to, Guide, etc.)",
        "✅ Specific and descriptive"
      ],
      "description": [
        "✅ 150-160 characters (optimal)",
        "✅ What readers learn stated",
        "✅ Key benefit mentioned",
        "✅ Target audience clear"
      ],
      "tags": [
        "✅ 4-6 tags (optimal)",
        "✅ Primary technology included",
        "✅ Content type tag (tutorial, guide)",
        "✅ Difficulty level tag"
      ]
    },
    "content_quality": {
      "readability": [
        "✅ Clear, concise language",
        "✅ Logical flow from simple to complex",
        "✅ Scannable structure with headings",
        "✅ Code examples explained"
      ],
      "completeness": [
        "✅ Prerequisites mentioned if needed",
        "✅ Step-by-step instructions clear",
        "✅ Error handling covered",
        "✅ Conclusion summarizes key points"
      ],
      "visual_elements": [
        "✅ Code blocks properly formatted",
        "✅ Mermaid diagrams for complex flows",
        "✅ Consistent formatting throughout",
        "✅ Proper use of lists and emphasis"
      ]
    }
  },
  "consistency_validations": {
    "article_index_sync": [
      "✅ Article exists in index",
      "✅ All metadata matches frontmatter",
      "✅ Category/subcategory valid", 
      "✅ Technology field consistent",
      "✅ URL pattern followed"
    ],
    "cross_references": [
      "✅ Internal links use correct URLs",
      "✅ Referenced articles exist",
      "✅ Technology names consistent",
      "✅ Terminology usage consistent"
    ]
  },
  "automation_checks": {
    "pre_generation": {
      "description": "Checks before content generation",
      "steps": [
        "Fetch latest schemas from GitHub",
        "Validate categories.json accessibility",
        "Check existing article index",
        "Verify output directory structure"
      ]
    },
    "post_generation": {
      "description": "Checks after content generation",
      "steps": [
        "Run content validation script",
        "Check article index consistency", 
        "Validate all URLs are unique",
        "Test Mermaid diagram syntax"
      ]
    },
    "deployment_ready": {
      "description": "Final checks before staging",
      "criteria": [
        "✅ All validation scripts pass",
        "✅ No duplicate URLs",
        "✅ All referenced files exist",
        "✅ Index count matches articles",
        "✅ No broken internal links"
      ]
    }
  },
  "manual_review_checklist": {
    "content_accuracy": [
      "Technical information is correct",
      "Code examples work as expected",
      "Best practices are current",
      "No security vulnerabilities in examples"
    ],
    "user_experience": [
      "Article flows logically",
      "Examples are practical and useful",
      "Difficulty level matches content",
      "Conclusion provides clear takeaways"
    ],
    "editorial_quality": [
      "Grammar and spelling correct",
      "Technical terms used consistently",
      "Tone matches brand voice",
      "Visual formatting enhances readability"
    ]
  },
  "validation_tools_usage": {
    "content_validator": {
      "command": "node validate-content.js staging/guides content-schema.json",
      "checks": "Frontmatter, code blocks, structure",
      "output": "Errors and warnings list"
    },
    "index_validator": {
      "command": "node validate-article-index.js staging/config/article-index-update.json",
      "checks": "Index consistency, URL patterns",
      "output": "Validation results summary"
    },
    "build_test": {
      "command": "npm run build",
      "checks": "Next.js compilation, TypeScript",
      "output": "Build success/failure"
    }
  }
}